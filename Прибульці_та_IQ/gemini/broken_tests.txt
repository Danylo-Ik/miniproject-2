_____________ Prompt 1 _____________

Can you create unittests for this code?
Try to include every possible test with all edge cases:
... code ...

_______________ Code _______________

import unittest
from solution import rescue_people, read_file

class TestAlienRescue(unittest.TestCase):

    def test_empty_file(self):
        """Test with an empty file."""
        data = {}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)
        self.assertEqual(evacuees, [])

    def test_no_high_iq(self):
        """Test with everyone having IQ below 130."""
        data = {"John": 120, "Jane": 115}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)
        self.assertEqual(evacuees, [])

    def test_single_person(self):
        """Test with a single person with high IQ."""
        data = {"Einstein": 160}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 1)
        self.assertEqual(evacuees, [["Einstein"]])

    def test_multiple_people_one_ride(self):
        """Test with multiple people fitting on one ride."""
        data = {"Einstein": 140, "Jobs": 135}
        rides, evacuees = rescue_people(data, 275)
        self.assertEqual(rides, 1)
        self.assertEqual(evacuees, [["Einstein", "Jobs"]])

    def test_person_with_iq_equal_to_limit(self):
        """Test with a person with IQ equal to the limit."""
        data = {"Newton": 150}
        rides, evacuees = rescue_people(data, 150)
        self.assertEqual(rides, 1)
        self.assertEqual(evacuees, [["Newton"]])

if __name__ == '__main__':
    unittest.main()

_____________ Result _____________

 - Passed tests: 4/5
 - Total coverage: 85%
 - No tests for read_file()


_____________ Prompt 2 _____________


Include a test when the file is not empty and delete the last testcase.
Fill the file yourself, here is the structure:
... example of file structure ...

_______________ Code _______________

import unittest
from solution import rescue_people, read_file
import tempfile

class TestAlienRescue(unittest.TestCase):

    def create_test_file(self):
        """Create a temporary file with test data."""
        data = [
            "Einstein,140",
            "Jobs, 135"
        ]
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write('\n'.join(data).encode('utf-8'))
            return temp_file.name

    def test_empty_file(self):
        """Test with an empty file using read_file."""
        data = {}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)
        self.assertEqual(evacuees, [])
    
    def test_non_empty_file(self):
        """Test with a non-empty file using read_file."""
        # Assuming a file named "test_data.txt" exists with valid content
        test_file = self.create_test_file()
        data = read_file(test_file)
        rides, evacuees = rescue_people(data, 275)
        self.assertEqual(rides, 1)
        self.assertEqual(evacuees, [["Einstein", "Jobs"]])

    def test_no_high_iq(self):
        """Test with everyone having IQ below 130."""
        data = {"John": 120, "Jane": 115}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)
        self.assertEqual(evacuees, [])

    def test_single_person_below_limit(self):
        """Test with a single person with low IQ."""
        data = {"Einstein": 125}  # IQ below minimum threshold
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)  # No rides since IQ is below minimum
        self.assertEqual(evacuees, [])

    def test_single_person_high_iq(self):
        """Test with a single person with high IQ."""
        data = {"Einstein": 160}
        rides, evacuees = rescue_people(data, 100)
        self.assertEqual(rides, 0)  # No rides since limit is too low
        self.assertEqual(evacuees, [])

    def test_multiple_people_one_ride(self):
        """Test with multiple people fitting on one ride."""
        data = {"Einstein": 140, "Jobs": 135}
        rides, evacuees = rescue_people(data, 275)
        self.assertEqual(rides, 1)
        self.assertEqual(evacuees, [["Einstein", "Jobs"]])

if __name__ == '__main__':
    unittest.main()

_____________ Result _____________

 - Passed tests: 5/5
 - Total coverage: 100%

Done
