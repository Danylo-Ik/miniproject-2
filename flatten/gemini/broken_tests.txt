________________ Prompt 1 _________________

Develop a recursive function flatten(lst)
The flatten(lst) function must take a list lst, which may contain other lists, which may also contain other lists, and which may also contain lists... As a result, the function must return a single list consisting of all non-empty elements of each of the input lists. The elements must be ordered as in the original list. If you did not pass a list, then you must return the argument itself. The original list must remain unchanged.

write unittests for flatten()

_________________ Result __________________
import unittest
from solution import flatten


class TestFlatten(unittest.TestCase):

  def test_empty_list(self):
    self.assertEqual(flatten([]), [])

  def test_single_element(self):
    self.assertEqual(flatten([1]), [1])

  def test_flat_list(self):
    self.assertEqual(flatten([1, 2, 3]), [1, 2, 3])

  def test_nested_list(self):
    self.assertEqual(flatten([1, [2, 3], 4]), [1, 2, 3, 4])

  def test_mixed_list(self):
    self.assertEqual(flatten([1, None, [2, 3], 4]), [1, 2, 3, 4])

  def test_deeply_nested(self):
    self.assertEqual(flatten([1, [2, [3, 4]], 5]), [1, 2, 3, 4, 5])

if __name__ == "__main__":
  unittest.main()