_____________ Prompt 1 _____________
can you please write unittest and cover all edge tests:
... code ...

_______________ Code _______________
import unittest
from expression_calculator import calculate_expression
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_chained_operations(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3 помножити на 4?"), 14)
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2 додати 5?"), 7)
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3 відняти 2?"), 10)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")
        self.assertEqual(calculate_expression("Скільки буде 2 + 3 * -4?"), -5)

if __name__ == '__main__':
    unittest.main()

_____________ Result _____________

 - Passed tests: 4/6
 - Total coverage: 94%
 - made a mistake because it believed that this task 
should take into account the priority of operations


_____________ Prompt 2 _____________
in this code you do not need to take into account the priority of operations and also add cases when we have list out of range 
and if invalid input based on the code I provided

_______________ Code _______________
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")  # Invalid number of operands
        self.assertEqual(calculate_expression("Скільки буде hello world?"), "Неправильний вираз!")  # Invalid operand

    def test_missing_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 2 +"), "Неправильний вираз!")  # Missing operand after operator
        self.assertEqual(calculate_expression("Скільки буде + 2"), "Неправильний вираз!")  # Operator at the beginning

    def test_division_by_zero(self):
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")

_____________ Result _____________

 - Passed tests: 7/7
 - Total coverage: 94%
 - No tests for error list out of range and if input is invalid 


_____________ Prompt 3 _____________
also include cases for unittest when list out of range 
and if invalid input based on the code I provided

_______________ Code _______________
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")  # Invalid number of operands
        self.assertEqual(calculate_expression("Скільки буде hello world?"), "Неправильний вираз!")  # Invalid operand

    def test_missing_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 2 +"), "Неправильний вираз!")  # Missing operand after operator
        self.assertEqual(calculate_expression("Скільки буде + 2"), "Неправильний вираз!")  # Operator at the beginning

    def test_division_by_zero(self):
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")

    # New tests for invalid input
    def test_empty_expression(self):
        self.assertEqual(calculate_expression(""), "Неправильний вираз!")  # Empty string

    def test_single_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 5"), 5)  # Single operand is valid

_____________ Result _____________

 - Passed tests: 9/9
 - Total coverage: 97%
 - No test when input is not string

_____________ Prompt 3 _____________
cover all edge test

_______________ Code _______________
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")  # Invalid number of operands
        self.assertEqual(calculate_expression("Скільки буде hello world?"), "Неправильний вираз!")  # Invalid operand

    def test_missing_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 2 +"), "Неправильний вираз!")  # Missing operand after operator
        self.assertEqual(calculate_expression("Скільки буде + 2"), "Неправильний вираз!")  # Operator at the beginning

    def test_division_by_zero(self):
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")

    # New tests for invalid input
    def test_empty_expression(self):
        self.assertEqual(calculate_expression(""), "Неправильний вираз!")  # Empty string

    def test_single_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 5"), 5)  # Single operand is valid

    def test_multiple_operators(self):
        self.assertEqual(calculate_expression("Скільки буде 2 ++ 3"), "Неправильний вираз!")  # Two consecutive operators
        self.assertEqual(calculate_expression("Скільки буде 2 + - 3"), "Неправильний вираз!")  # Two operators without operand

    def test_leading_operator(self):
        self.assertEqual(calculate_expression("Скільки буде * 2 + 3"), "Неправильний вираз!")  # Leading operator

    def test_trailing_operator(self):
        self.assertEqual(calculate_expression("Скільки буде 2 + 3 *"), "Неправильний вираз!")

_____________ Result _____________

 - Passed tests: 12/12
 - Total coverage: 97%
 - No test when input is not string


_____________ Prompt 4 _____________
add test when input is not string

_______________ Code _______________
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")  # Invalid number of operands
        self.assertEqual(calculate_expression("Скільки буде hello world?"), "Неправильний вираз!")  # Invalid operand

    def test_missing_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 2 +"), "Неправильний вираз!")  # Missing operand after operator
        self.assertEqual(calculate_expression("Скільки буде + 2"), "Неправильний вираз!")  # Operator at the beginning

    def test_division_by_zero(self):
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")

    # New tests for invalid input
    def test_empty_expression(self):
        self.assertEqual(calculate_expression(""), "Неправильний вираз!")  # Empty string

    def test_single_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 5"), 5)  # Single operand is valid

    def test_multiple_operators(self):
        self.assertEqual(calculate_expression("Скільки буде 2 ++ 3"), "Неправильний вираз!")  # Two consecutive operators
        self.assertEqual(calculate_expression("Скільки буде 2 + - 3"), "Неправильний вираз!")  # Two operators without operand

    def test_leading_operator(self):
        self.assertEqual(calculate_expression("Скільки буде * 2 + 3"), "Неправильний вираз!")  # Leading operator

    def test_trailing_operator(self):
        self.assertEqual(calculate_expression("Скільки буде 2 + 3 *"), "Неправильний вираз!")  # Trailing operator

_____________ Result _____________

 - Passed tests: 12/12
 - Total coverage: 97%
 - No test when input is not string


_____________ Prompt 5 _____________
add test when input is not string

_______________ Code _______________
class TestCalculateExpression(unittest.TestCase):

    def test_simple_addition(self):
        self.assertEqual(calculate_expression("Скільки буде 2 додати 3?"), 5)

    def test_simple_subtraction(self):
        self.assertEqual(calculate_expression("Скільки буде 5 відняти 2?"), 3)

    def test_simple_multiplication(self):
        self.assertEqual(calculate_expression("Скільки буде 4 помножити на 3?"), 12)

    def test_simple_division(self):
        self.assertEqual(calculate_expression("Скільки буде 10 поділити на 2?"), 5)

    def test_invalid_expression(self):
        self.assertEqual(calculate_expression("Скільки буде 2 3 +?"), "Неправильний вираз!")  # Invalid number of operands
        self.assertEqual(calculate_expression("Скільки буде hello world?"), "Неправильний вираз!")  # Invalid operand

    def test_missing_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 2 +"), "Неправильний вираз!")  # Missing operand after operator
        self.assertEqual(calculate_expression("Скільки буде + 2"), "Неправильний вираз!")  # Operator at the beginning

    def test_division_by_zero(self):
        self.assertEqual(calculate_expression("Скільки буде 2 * 3 / 0?"), "Неправильний вираз!")

    # New tests for invalid input
    def test_empty_expression(self):
        self.assertEqual(calculate_expression(""), "Неправильний вираз!")  # Empty string
        self.assertEqual(calculate_expression(12), "Неправильний вираз!")

    def test_single_operand(self):
        self.assertEqual(calculate_expression("Скільки буде 5"), 5)  # Single operand is valid

    def test_multiple_operators(self):
        self.assertEqual(calculate_expression("Скільки буде 2 ++ 3"), "Неправильний вираз!")  # Two consecutive operators
        self.assertEqual(calculate_expression("Скільки буде 2 + - 3"), "Неправильний вираз!")  # Two operators without operand

    def test_leading_operator(self):
        self.assertEqual(calculate_expression("Скільки буде * 2 + 3"), "Неправильний вираз!")  # Leading operator

    def test_trailing_operator(self):
        self.assertEqual(calculate_expression("Скільки буде 2 + 3 *"), "Неправильний вираз!")  # Trailing operator

_____________ Result _____________

 - Passed tests: 12/12
 - Total coverage: 100%
 - Unfortunately, all the time he threw the same code, 
no matter how many times I asked him to redo it

